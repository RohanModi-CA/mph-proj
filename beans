#include "raylib.h"
#include "rcamera.h"
#define MAX_COLUMNS 20

// Types and Structures Definition
typedef enum GameScreen { LOGO = 0, TITLE, SIM1, SIM2, ABOUT_US, ENDING } GameScreen;

// Function to check if a button is clicked
bool IsButtonClicked(Rectangle button) {
    return CheckCollisionPointRec(GetMousePosition(), button) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON);
}

// Global Back button position (centered at the bottom)
Rectangle backButton = {0, 0, 100, 40}; // Will be updated for position later

// Function to draw the Back button and handle its click
void DrawBackButton(GameScreen *currentScreen) {
    if (*currentScreen == SIM1 || *currentScreen == SIM2 || *currentScreen == ABOUT_US) {
        backButton.x =  (GetScreenWidth() - backButton.width) / 2; // Centered horizontally
        backButton.y = GetScreenHeight() - backButton.height - 20; // Bottom of the screen with padding

        // Draw the Back button
        DrawRectangleRounded(backButton, 0.3f, 10, GRAY);
        DrawText("BACK", backButton.x + 20, backButton.y + 10, 20, WHITE);

        // Check for click
        if (IsButtonClicked(backButton)) {
            *currentScreen = TITLE; // Navigate back to the Title screen
        }
    }
}

int main(void)
{
    // Initialization
    const int screenWidth = 800;
    const int screenHeight = 450;

    InitWindow(screenWidth, screenHeight, "raylib - Integrated Simulation Program");

    GameScreen currentScreen = LOGO;
    int framesCounter = 0; // Frame counter

    // Load resources
    Texture2D relativityImage = LoadTexture("resources/picture.png");

    // Simulation 1 variables
    Camera camera = { 0 };
    camera.position = (Vector3){ 0.0f, 2.0f, 4.0f };
    camera.target = (Vector3){ 0.0f, 2.0f, 0.0f };
    camera.up = (Vector3){ 0.0f, 1.0f, 0.0f };
    camera.fovy = 60.0f;
    camera.projection = CAMERA_PERSPECTIVE;

    int cameraMode = CAMERA_FIRST_PERSON;

    float heights[MAX_COLUMNS] = { 0 };
    Vector3 positions[MAX_COLUMNS] = { 0 };
    Color colors[MAX_COLUMNS] = { 0 };

    for (int i = 0; i < MAX_COLUMNS; i++) {
        heights[i] = (float)GetRandomValue(1, 12);
        positions[i] = (Vector3){ (float)GetRandomValue(-15, 15), heights[i]/2.0f, (float)GetRandomValue(-15, 15) };
        colors[i] = (Color){ GetRandomValue(20, 255), GetRandomValue(10, 55), 30, 255 };
    }

    SetTargetFPS(60);

    // Main game loop
    while (!WindowShouldClose())
    {
        // Update
        switch (currentScreen)
        {
            case LOGO:
                framesCounter++;
                if (framesCounter > 0) {
                    currentScreen = TITLE;
                }
                break;

            case TITLE:
            {
                Rectangle sim1Button = {screenWidth / 2 - 120, screenHeight / 2 + 20, 240, 50};
                Rectangle sim2Button = {screenWidth / 2 - 120, screenHeight / 2 + 80, 240, 50};
                Rectangle aboutUsButton = {screenWidth - 110, screenHeight - 40, 100, 30};

                if (IsButtonClicked(sim1Button)) {
                    currentScreen = SIM1;
                }
                if (IsButtonClicked(sim2Button)) {
                    currentScreen = SIM2;
                }
                if (IsButtonClicked(aboutUsButton)) {
                    currentScreen = ABOUT_US;
                }
            } break;

            case SIM1:
            {
                // Switch camera mode
                if (IsKeyPressed(KEY_ONE)) cameraMode = CAMERA_FREE;
                if (IsKeyPressed(KEY_TWO)) cameraMode = CAMERA_FIRST_PERSON;
                if (IsKeyPressed(KEY_THREE)) cameraMode = CAMERA_THIRD_PERSON;
                if (IsKeyPressed(KEY_FOUR)) cameraMode = CAMERA_ORBITAL;

                UpdateCamera(&camera, cameraMode);
            } break;

            case SIM2:
            case ABOUT_US:
            {
                // The back button logic is now handled by DrawBackButton
            } break;

            default:
                break;
        }

        // Draw
        BeginDrawing();
        ClearBackground(RAYWHITE);

        switch (currentScreen)
        {
            case LOGO:
                DrawText("LOGO SCREEN", 20, 20, 40, LIGHTGRAY);
                DrawText("WAIT for 2 SECONDS...", 290, 220, 20, GRAY);
                break;

            case TITLE:
            {
                Rectangle sim1Button = {screenWidth / 2 - 120, screenHeight / 2 + 20, 240, 50};
                Rectangle sim2Button = {screenWidth / 2 - 120, screenHeight / 2 + 80, 240, 50};
                Rectangle aboutUsButton = {screenWidth - 110, screenHeight - 40, 100, 30};

                Rectangle sourceRec = { 0.0f, 0.0f, (float)relativityImage.width, (float)relativityImage.height };
                Rectangle destRec = { 0.0f, 0.0f, (float)screenWidth, (float)screenHeight };
                Vector2 origin = { 0.0f, 0.0f };

                DrawTexturePro(relativityImage, sourceRec, destRec, origin, 0.0f, WHITE);
                DrawText("SPECIAL RELATIVITY", 20, 20, 40, WHITE);

                DrawRectangleRounded(sim1Button, 0.3f, 10, WHITE);
                DrawRectangleRounded(aboutUsButton, 0.5f, 10, WHITE);

                DrawText("LET'S GO!", sim1Button.x + 45, sim1Button.y + 15, 20, BLACK);
                DrawText("ABOUT US!", aboutUsButton.x + 10, aboutUsButton.y + 5, 15, BLACK);
            } break;

            case SIM1:
                BeginMode3D(camera);
                DrawPlane((Vector3){ 0.0f, 0.0f, 0.0f }, (Vector2){ 32.0f, 32.0f }, LIGHTGRAY);
                for (int i = 0; i < MAX_COLUMNS; i++) {
                    DrawCube(positions[i], 2.0f, heights[i], 2.0f, colors[i]);
                    DrawCubeWires(positions[i], 2.0f, heights[i], 2.0f, MAROON);
                }
                EndMode3D();
                DrawText("SIMULATION 1 SCREEN", 20, 20, 20, DARKGREEN);
                break;

            case ABOUT_US:
                DrawText("ABOUT THE PROJECT", 20, 50, 30, DARKGRAY);
                DrawText("This project is a simple interactive demonstration of", 20, 100, 20, GRAY);
                DrawText("special relativity concepts using raylib.", 20, 130, 20, GRAY);
                DrawText("Created by Rohan Modi and Olivia Choi.", 20, 180, 20, GRAY);
                break;

            default:
                break;
        }

        // Draw Back button (only in specific screens)
        DrawBackButton(&currentScreen);

        EndDrawing();
    }

    UnloadTexture(relativityImage);
    CloseWindow();
    return 0;
}
